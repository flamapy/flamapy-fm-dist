
    """
    """
    

    """
    Now in this section we introduce all the operations that do need a solver to be executed
    """
    def products(self):
        """ 
        This operation is used to find products in a model:
        It returns the product if it is found in the model. 
        If the model does not follow the UVL specification, an 
        exception is raised and the operation returns False.
        
        This operation requires the model to be translated to sat, 
        so we check if thats done
        """
      
        # Try to use the operation, which returns the product if it is found
        try:
            self._transform_to_sat()
            return self.dm.use_operation('Products', self.sat_model).execute()
        except:
            return False

    '''

    

    def dead_features(self,model):
        """ 
        This operation is used to find the dead features in a model:
        It returns the dead if it is found in the model. 
        If the model does not follow the UVL specification, an 
        exception is raised and the operation returns False.
        """

        # Try to use the Find operation, which returns the dead if it is found
        try:
            self._transform_to_sat()
            features = self.dm.use_operation('DeadFeatures', self.sat_model).execute()
            dead_features = []
            for feature in features:
                dead_features.append(feature.name)
            return dead_features
        except Exception as e:
            return False

    def number_of_products(self):
        """ 
        This operation is used to count the number of products in a model:
        It returns the number of products in the model. 
        If the model does not follow the UVL specification, an 
        exception is raised and the operation returns False.
        """

        # Try to use the Products operation, which returns a list of products
        # TODO This operation is more officient in BDD, analyze if is worth to include its use
        try:
            self._transform_to_sat()
            return self.dm.use_operation(self.sat_model,'ProductsNumber').execute()
        except:
            return False


    def valid_fm(self):
        """ 
        This operation is used to validate a model:
        It returns True if the model is valid, False otherwise. 
        If the model does not follow the UVL specification, an 
        exception is raised and the operation returns False.
        """
        # Try to use the Valid operation, which returns True if the model is valid

        try:
            self._transform_to_sat()
            return self.dm.use_operation(self.sat_model,'Valid').execute()
        except:
            return False
    def valid_product(model, product):
        """
        This operation is used to validate a product:
        It returns True if the product is valid, False otherwise.
        If the model does not follow the UVL specification, an
        exception is raised and the operation returns False.
        """

        dm = DiscoverMetamodels()

        # Change the file extension of product.csv to csvconf
        product_csvconf = product.replace('.csv', '.csvconf')

        # Save the configuration file with new extension
        with open(product_csvconf, 'w', newline='') as csvfile:
            csv_writer = csv.writer(csvfile)
            with open(product, newline='') as original_csvfile:
                csv_reader = csv.reader(original_csvfile)
                for row in csv_reader:
                    csv_writer.writerow(row)

        # Try to use the Valid operation, which returns True if the configuration is valid
        try:
            result = dm.use_operation_from_file(
                'ValidProduct', model, configuration_file=product_csvconf)
            # delete the csvconf file
            os.remove(product_csvconf)
            return result
        except:
            # delete the csvconf file
            os.remove(product_csvconf)
            return False


    def valid_configuration(model, configuration):
        """
        This operation is used to validate a configuration:
        It returns True if the configuration is valid, False otherwise.
        If the model does not follow the UVL specification, an
        exception is raised and the operation returns False.
        """
        dm = DiscoverMetamodels()

        # Change the file extension of configuration to csvconf
        configuration_csvconf = configuration.replace('.csv', '.csvconf')

        # Save the configuration file with new extension
        with open(configuration_csvconf, 'w', newline='') as csvfile:
            csv_writer = csv.writer(csvfile)
            with open(configuration, newline='') as original_csvfile:
                csv_reader = csv.reader(original_csvfile)
                for row in csv_reader:
                    csv_writer.writerow(row)

        # Try to use the Valid operation, which returns True if the configuration is valid
        try:
            result = dm.use_operation_from_file(
                'ValidConfiguration', model, configuration_file=configuration_csvconf)
            # delete the csvconf file
            os.remove(configuration_csvconf)
            return result
        except:
            # delete the csvconf file
            os.remove(configuration_csvconf)
            return False
    '''



"""
def test_model_validator_valid_model():
    # Arrange
    valid_model = "./resources/models/valid_model.uvl"

    # Load Model
    fm=FLAMAFeatureModel(valid_model)

    # Act
    result = fm.valid_fm()

    # Assert
    assert result == True

def test_model_validator_invalid_model():
    # Arrange
    invalid_model = "./resources/products/valid_product.csv"

    # Act
    result = model_validator(invalid_model)

    # Assert
    assert result == False


def test_product_validator_valid_product():
    # Arrange
    valid_model = "./resources/models/valid_model.uvl"
    valid_product = "./resources/products/valid_product.csv"

    # Act
    result = product_validator(valid_model, valid_product)

    # Assert
    assert result == True


def test_product_validator_invalid_product():
    # Arrange
    valid_model = "./resources/models/valid_model.uvl"
    invalid_product = "./resources/products/invalid_product.csv"

    # Act
    result = product_validator(valid_model, invalid_product)

    # Assert
    assert result == False


def test_configuration_validator_valid_configuration():
    # Arrange
    valid_model = "./resources/models/valid_model.uvl"
    valid_configuration = "./resources/configurations/valid_configuration.csv"

    # Act
    result = configuration_validator(valid_model, valid_configuration)

    # Assert
    assert result == True


def test_count_valid_products():
    # Arrange
    valid_model = "./resources/models/valid_model.uvl"

    # Act
    result = count_valid_products(valid_model)

    # Assert
    assert result == 816


def test_count_leafs():
    # Arrange
    valid_model = "./resources/models/valid_model.uvl"

    # Act
    result = count_leafs(valid_model)

    # Assert
    assert result == 17


def test_find_valid_products():
    # Arrange
    valid_model = "./resources/models/valid_model.uvl"

    # Act
    result = find_valid_products(valid_model)

    # Assert
    assert len(result) > 0


def test_find_core_features():
    # Arrange
    valid_model = "./resources/models/valid_model.uvl"
    core_features = ["eCommerce", "Server", "Web", "Catalog", "Search",
                     "Shopping", "Security",  "Cart", "Payment", "PHP", "Storage", "v74"]
    # Act
    result = find_core_features(valid_model)

    # Assert
    assert result == core_features
"""