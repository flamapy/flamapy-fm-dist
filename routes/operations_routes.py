import os
from flask import Blueprint, request, jsonify
from operations.FLAMAFeatureModel import FLAMAFeatureModel

operations_bp = Blueprint('operations_bp', __name__, url_prefix='/api/v1/operations')

MODEL_FOLDER = './resources/models/'

def _exec_operation(operation_name:str,uploaded_model:str):
    fm=FLAMAFeatureModel(os.path.join(
            MODEL_FOLDER, uploaded_model))
    operation =getattr(fm,operation_name)
    return operation()
    
def _api_call(operation_name:str):
    # Get files
    uploaded_model = request.files['model']

    # Check if file is provided
    if uploaded_model.filename != '':

        # Save file
        uploaded_model.save(os.path.join(
            MODEL_FOLDER, uploaded_model.filename))

        result=_exec_operation(operation_name,uploaded_model.filename)
        # Remove file
        os.remove(os.path.join(MODEL_FOLDER, uploaded_model.filename))
        
        # Return result
        if (result):
            return jsonify(result)
        else:
            return jsonify(error='No valid products found'), 404

'''
This is the set of operations within the fm metamodel. 
TODO This could be self generated by means of implementing classes (Operation)
'''
@operations_bp.route('/atomic_sets', methods=['POST'])
def atomic_sets():
    return _api_call("atomic_sets")

@operations_bp.route('/average_branching_factor', methods=['POST'])
def average_branching_factor():
    return _api_call("average_branching_factor")
        
@operations_bp.route('/core_features', methods=['POST'])
def core_features():
    return _api_call("core_features")

@operations_bp.route('/count_leafs', methods=['POST'])
def count_leafs():
    return _api_call("count_leafs")

@operations_bp.route('/estimated_number_of_products', methods=['POST'])
def estimated_number_of_products():
    return _api_call("estimated_number_of_products")

@operations_bp.route('/feature_ancestors', methods=['POST'])
def feature_ancestors():
    return _api_call("feature_ancestors")

@operations_bp.route('/leaf_features', methods=['POST'])
def leaf_features():
    return _api_call("leaf_features")
    
@operations_bp.route('/max_depth', methods=['POST'])
def max_depth():
    return _api_call("max_depth")

'''
This is the set of operations within the fm metamodel. 
TODO This could be self generated by means of implementing classes (Operation)
'''